/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hneen.myoop.GUI;

import com.hneen.myoop.*;

import javax.swing.*;
import java.sql.*;
import java.util.*;


/**
 *
 * @author hneen
 */
public class cart extends javax.swing.JFrame {

    /**
     * Creates new form cart
     */
//to viwe the item form the DB
    String [] listBook;

    //to view the items in the cart of the customer
    List<cartclass> cart;

    int id_order=0;
    int id_customer=0;
    int id_payment = 0;
    int num_items=0;
    double totalPrice_=0;

    //for the itemlist combobox
    String [] listitem;

    public cart(String username,String password) {
        initComponents();
        deliverer_buttonGroup=new ButtonGroup();
        Payment_buttonGroup=new ButtonGroup();
        deliverer_buttonGroup.add(shipping_RadioButton3);
        deliverer_buttonGroup.add(pick_upRadioButton4);
        Payment_buttonGroup.add(card_RadioButton2);
        Payment_buttonGroup.add(cash_RadioButton1);
        holdername_Label5.setVisible(false);
        cardnum_Label6.setVisible(false);
        cvv_Label8.setVisible(false);
        type_Label7.setVisible(false);
        holdername_TextField1.setVisible(false);
        type_TextField2.setVisible(false);
        cvv_TextField4.setVisible(false);
        cardnum_TextField3.setVisible(false);


        showCustomer_info(username,password);
        showCart();
        int i=0;
        if (getAllItems()!=null){
            listBook=new String[50];
            for (Items b: getAllItems()){
                if (i!=50){
                    listBook[i]=b.toString();
                    i++;
                }
            }
            itemlist.setModel(new DefaultComboBoxModel<>(listBook));
            cart_List1.setModel(new DefaultComboBoxModel<>());
        }
       try {
            DB n = new DB();
            Connection dbconn = n.connectDB();
            PreparedStatement id_p = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM sunshine.order");
            ResultSet resultSet = id_p.executeQuery();
            while (resultSet.next()) {
                id_order = resultSet.getInt("order_id");
            }
            id_order++;
           PreparedStatement insert_id = (PreparedStatement) dbconn.prepareStatement("INSERT INTO sunshine.order (order_id) VALUES (?)");
           insert_id.setInt(1,id_order );
           int res =insert_id.executeUpdate();
           if (res==1){

           }
           dbconn.close();
           id_p.close();
           resultSet.close();
           insert_id.close();
        } catch (SQLException e) {
           e.printStackTrace();
       }

        try { DB n = new DB();
        Connection dbconn = n.connectDB();
        PreparedStatement id_pay = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM sunshine.payment_methods");
        ResultSet resultSet = id_pay.executeQuery();
        while (resultSet.next()) {
            id_payment = resultSet.getInt("Payment_id");
        }
        id_payment++;
        PreparedStatement insert_id = (PreparedStatement) dbconn.prepareStatement("INSERT INTO sunshine.payment_methods (Payment_id,Order_id) VALUES (?,?)");
        insert_id.setInt(1, id_payment);
        insert_id.setInt(2, id_order);
        int res = insert_id.executeUpdate();
        if (res == 1) {

    }
            dbconn.close();
            id_pay.close();
            resultSet.close();
            insert_id.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public cart() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Payment_buttonGroup = new javax.swing.ButtonGroup();
        deliverer_buttonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cart_List1 = new javax.swing.JList<>();
        remove_Button1 = new javax.swing.JButton();
        Add_Button2 = new javax.swing.JButton();
        print_bill_Button3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cash_RadioButton1 = new javax.swing.JRadioButton();
        card_RadioButton2 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        shipping_RadioButton3 = new javax.swing.JRadioButton();
        pick_upRadioButton4 = new javax.swing.JRadioButton();
        holdername_Label5 = new javax.swing.JLabel();
        cardnum_Label6 = new javax.swing.JLabel();
        type_Label7 = new javax.swing.JLabel();
        cvv_Label8 = new javax.swing.JLabel();
        holdername_TextField1 = new javax.swing.JTextField();
        type_TextField2 = new javax.swing.JTextField();
        cardnum_TextField3 = new javax.swing.JTextField();
        cvv_TextField4 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemlist = new javax.swing.JList<>();
        customer_name = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ExitButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 244, 248));

        jPanel2.setBackground(new java.awt.Color(44, 42, 65));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\hneen\\Documents\\NetBeansProjects\\project_oop2\\src\\main\\icons\\online-shopping.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cart");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        cart_List1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(cart_List1);

        remove_Button1.setBackground(new java.awt.Color(253, 191, 80));
        remove_Button1.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        remove_Button1.setForeground(new java.awt.Color(0, 0, 0));
        remove_Button1.setText("Remove");
        remove_Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_Button1ActionPerformed(evt);
            }
        });

        Add_Button2.setBackground(new java.awt.Color(253, 191, 80));
        Add_Button2.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        Add_Button2.setForeground(new java.awt.Color(0, 0, 0));
        Add_Button2.setText("Add ");
        Add_Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Button2ActionPerformed(evt);
            }
        });

        print_bill_Button3.setBackground(new java.awt.Color(253, 191, 80));
        print_bill_Button3.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        print_bill_Button3.setForeground(new java.awt.Color(0, 0, 0));
        print_bill_Button3.setText("Print the Bill");
        print_bill_Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_bill_Button3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Chose the payment methods:");

        cash_RadioButton1.setForeground(new java.awt.Color(0, 102, 102));
        cash_RadioButton1.setText("Cash");
        cash_RadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cash_RadioButton1ActionPerformed(evt);
            }
        });

        card_RadioButton2.setForeground(new java.awt.Color(0, 102, 102));
        card_RadioButton2.setText("Card");
        card_RadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card_RadioButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Choose the Deliverer way:");

        shipping_RadioButton3.setForeground(new java.awt.Color(0, 102, 102));
        shipping_RadioButton3.setText("shipping");

        pick_upRadioButton4.setForeground(new java.awt.Color(0, 102, 102));
        pick_upRadioButton4.setText("pick up");

        holdername_Label5.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        holdername_Label5.setForeground(new java.awt.Color(0, 0, 0));
        holdername_Label5.setText("Holder Name:");

        cardnum_Label6.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        cardnum_Label6.setForeground(new java.awt.Color(0, 0, 0));
        cardnum_Label6.setText("Card Number: ");

        type_Label7.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        type_Label7.setForeground(new java.awt.Color(0, 0, 0));
        type_Label7.setText("Type:");

        cvv_Label8.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        cvv_Label8.setForeground(new java.awt.Color(0, 0, 0));
        cvv_Label8.setText("CVV:");

        itemlist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(itemlist);

        customer_name.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        customer_name.setForeground(new java.awt.Color(0, 51, 102));
        customer_name.setText("customer name");

        jLabel9.setFont(new java.awt.Font("Segoe UI Emoji", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 102));
        jLabel9.setText("Welcome ");

        ExitButton3.setBackground(new java.awt.Color(253, 191, 80));
        ExitButton3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        ExitButton3.setForeground(new java.awt.Color(0, 0, 0));
        ExitButton3.setText("Exit");
        ExitButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButton3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 102));
        jLabel5.setText("Choose from the library");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 102));
        jLabel6.setText("Your Cart");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(holdername_Label5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cardnum_Label6, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(cvv_Label8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(holdername_TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cardnum_TextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cvv_TextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(type_Label7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(type_TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cash_RadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(card_RadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(print_bill_Button3, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(shipping_RadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pick_upRadioButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(148, 148, 148))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(ExitButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(remove_Button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Add_Button2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(Add_Button2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(remove_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cash_RadioButton1)
                            .addComponent(card_RadioButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shipping_RadioButton3)
                            .addComponent(pick_upRadioButton4))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(print_bill_Button3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(holdername_Label5)
                            .addComponent(holdername_TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(type_Label7)
                            .addComponent(type_TextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cardnum_Label6)
                            .addComponent(cardnum_TextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cvv_TextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cvv_Label8))))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Add_Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Button2ActionPerformed
        int select=-1;
        select=itemlist.getSelectedIndex();
        if (select!=-1){
            try {
                int index=-1;
                index=getAllItems().get(select).getItem_id();
                if (index!=-1 && id_order!=-1){
                    addToCArat(select,index,id_order);
                }

            }catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
            }


        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Add_Button2ActionPerformed

    private void print_bill_Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_bill_Button3ActionPerformed
        // TODO add your handling code here:
       if(cart!=null) {

           if (card_RadioButton2.isSelected() || cash_RadioButton1.isSelected()){
               card card = null;
               cash cash=null;
               if (card_RadioButton2.isSelected()) {
                   setTotalPrice_();
                   int ID_pay = id_payment;
                   String holder = holdername_TextField1.getText();
                   String type = type_TextField2.getText();
                   String card_num = cardnum_TextField3.getText();
                   String CVV = cvv_TextField4.getText();
                   if (holder.isEmpty() || type.isEmpty() || card_num.isEmpty() || CVV.isEmpty() || totalPrice_ == 0) {
                       JOptionPane.showMessageDialog(this, "should not be empty", "Error", JOptionPane.ERROR_MESSAGE);
                   } else {
                      if (card_num.length()==16){
                         if (CVV.length()==3){
                              if (card_num.matches("[0-9]+") && CVV.matches("[0-9]+")) {
                                  if (holder.matches("[a-zA-Z_]+") && type.matches("[a-zA-Z_]+")) {
                                      card = new card(ID_pay, totalPrice_, holder, type, card_num, CVV);
//
                                      if (pick_upRadioButton4.isSelected() || shipping_RadioButton3.isSelected()){
                                          sendPaynemt(card, num_items);
                                          pick_up pick=null;
                                          Shipping ship = null;
                                          if (pick_upRadioButton4.isSelected()){
                                              long millis=System.currentTimeMillis();
                                              pick=new pick_up(id_order,new java.sql.Date(millis));
                                              sendDeliveryInfo(pick);
                                          }

                                          if (shipping_RadioButton3.isSelected()){
                                              String companyname="Aramex";
                                              double price_ship=99.0;
                                              long millis=System.currentTimeMillis();
                                              ship=new Shipping(id_order,companyname,price_ship,new java.sql.Date(millis));
                                              sendDeliveryInfo(ship);
                                          }
                                          long millis=System.currentTimeMillis();
                                          if (sendOrderRecord(id_order,id_customer,id_payment,new java.sql.Date(millis))){
                                              if (card!=null){
                                                  if (ship!=null) {
                                                      dispose();
                                                      BillRotm d = new BillRotm(id_customer, num_items, card, ship);
                                                      d.setTitle("dashbord");
                                                      d.setVisible(true);
                                                  }
                                                  if (pick!=null) {
                                                      dispose();
                                                      BillRotm d = new BillRotm(id_customer, num_items,  card, pick);
                                                      d.setTitle("dashbord");
                                                      d.setVisible(true);
                                                  }
                                              }

                                              if (cash!=null){
                                                  if (ship!=null) {
                                                      dispose();
                                                      BillRotm d = new BillRotm(id_customer, num_items, cash, ship);
                                                      d.setTitle("dashbord");
                                                      d.setVisible(true);
                                                  }
                                                  if (pick!=null) {
                                                      dispose();
                                                      BillRotm d = new BillRotm(id_customer, num_items, cash, pick);
                                                      d.setTitle("dashbord");
                                                      d.setVisible(true);
                                                  }
                                              }
                                          }
                                      }
                                      else {
                                          JOptionPane.showMessageDialog(this, "select the delivery way first", "Error", JOptionPane.ERROR_MESSAGE);
                                      }
                                  } else {
                                      JOptionPane.showMessageDialog(this, "Pleas Enter letters Only at holder name and type", "Error", JOptionPane.ERROR_MESSAGE);
                                  }
                              } else {
                                  JOptionPane.showMessageDialog(this, "Pleas Enter number at card number and CVV", "Error", JOptionPane.ERROR_MESSAGE);
                              }
                          }else {
                             JOptionPane.showMessageDialog(this, "Pleas Enter 3 number at CVV filed", "Error", JOptionPane.ERROR_MESSAGE);
                         }

                       }else {
                          JOptionPane.showMessageDialog(this, "Pleas Enter 16 number at card number filed", "Error", JOptionPane.ERROR_MESSAGE);
                      }
                   }
               }else if (cash_RadioButton1.isSelected()) {
                   setTotalPrice_();
                   String CURRENCY = "SAR";
                    cash = new cash(id_payment, totalPrice_, CURRENCY);
                   if (pick_upRadioButton4.isSelected() || shipping_RadioButton3.isSelected()){
                       sendPaynemt(cash, num_items);
                       pick_up pick=null;
                       Shipping ship = null;
                       if (pick_upRadioButton4.isSelected()){
                           long millis=System.currentTimeMillis();
                           pick=new pick_up(id_order,new java.sql.Date(millis));
                           sendDeliveryInfo(pick);
                       }

                       if (shipping_RadioButton3.isSelected()){
                           String companyname="Aramex";
                           double price_ship=99.0;
                           long millis=System.currentTimeMillis();
                           ship=new Shipping(id_order,companyname,price_ship,new java.sql.Date(millis));
                           sendDeliveryInfo(ship);
                       }
                       long millis=System.currentTimeMillis();
                       if (sendOrderRecord(id_order,id_customer,id_payment,new java.sql.Date(millis))){
                           if (card!=null){
                               if (ship!=null) {
                                   dispose();
                                   BillRotm d = new BillRotm(id_customer, num_items, card, ship);
                                   d.setTitle("dashbord");
                                   d.setVisible(true);
                               }
                               if (pick!=null) {
                                   dispose();
                                   BillRotm d = new BillRotm(id_customer, num_items,  card, pick);
                                   d.setTitle("dashbord");
                                   d.setVisible(true);
                               }
                           }

                           if (cash!=null){
                               if (ship!=null) {
                                   dispose();
                                   BillRotm d = new BillRotm(id_customer, num_items, cash, ship);
                                   d.setTitle("dashbord");
                                   d.setVisible(true);
                               }
                               if (pick!=null) {
                                   dispose();
                                   BillRotm d = new BillRotm(id_customer, num_items, cash, pick);
                                   d.setTitle("dashbord");
                                   d.setVisible(true);
                               }
                           }
                       }
                   }
                   else {
                       JOptionPane.showMessageDialog(this, "select the delivery way first", "Error", JOptionPane.ERROR_MESSAGE);
                   }
               }
//               if (pick_upRadioButton4.isSelected() || shipping_RadioButton3.isSelected()){
//                   pick_up pick=null;
//                   Shipping ship = null;
//                   if (pick_upRadioButton4.isSelected()){
//                       long millis=System.currentTimeMillis();
//                       pick=new pick_up(id_order,new java.sql.Date(millis));
//                       sendDeliveryInfo(pick);
//                   }
//
//                   if (shipping_RadioButton3.isSelected()){
//                       String companyname="Aramex";
//                       double price_ship=99.0;
//                       long millis=System.currentTimeMillis();
//                        ship=new Shipping(id_order,companyname,price_ship,new java.sql.Date(millis));
//                       sendDeliveryInfo(ship);
//                   }
//                   long millis=System.currentTimeMillis();
//                   if (sendOrderRecord(id_order,id_customer,id_payment,new java.sql.Date(millis))){
//                       if (card!=null){
//                           if (ship!=null) {
//                               dispose();
//                               BillRotm d = new BillRotm(id_customer, num_items, card, ship);
//                               d.setTitle("dashbord");
//                               d.setVisible(true);
//                           }
//                           if (pick!=null) {
//                               dispose();
//                               BillRotm d = new BillRotm(id_customer, num_items,  card, pick);
//                               d.setTitle("dashbord");
//                               d.setVisible(true);
//                           }
//                       }
//
//                       if (cash!=null){
//                           if (ship!=null) {
//                               dispose();
//                               BillRotm d = new BillRotm(id_customer, num_items, cash, ship);
//                               d.setTitle("dashbord");
//                               d.setVisible(true);
//                           }
//                           if (pick!=null) {
//                               dispose();
//                               BillRotm d = new BillRotm(id_customer, num_items, cash, pick);
//                               d.setTitle("dashbord");
//                               d.setVisible(true);
//                           }
//                       }
//                   }
//               }
//               else {
//                   JOptionPane.showMessageDialog(this, "select the delivery way first", "Error", JOptionPane.ERROR_MESSAGE);
//               }
           }else {
               JOptionPane.showMessageDialog(this, "select the payment way first", "Error", JOptionPane.ERROR_MESSAGE);
           }

        }else {

           JOptionPane.showMessageDialog(this, "Add to cart first", "Error", JOptionPane.ERROR_MESSAGE);

       }
    }//GEN-LAST:event_print_bill_Button3ActionPerformed

    private void ExitButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
        Login d= new Login();
        d.setTitle("dashbord");
        d.setVisible(true);
    }//GEN-LAST:event_ExitButton3ActionPerformed

    private void remove_Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_Button1ActionPerformed
        // TODO add your handling code here:
        int select=-1;
        select=cart_List1.getSelectedIndex();
        if (select!=-1){
            try {
                    deleteItem(select);
            }catch (Exception e){
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }


        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_remove_Button1ActionPerformed

    private void card_RadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card_RadioButton2ActionPerformed
        // TODO add your handling code here:
        showCArdfield(evt);
//        getPaymentInfo(evt);


    }//GEN-LAST:event_card_RadioButton2ActionPerformed

    private void cash_RadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cash_RadioButton1ActionPerformed
        // TODO add your handling code here:

        showCArdfield(evt);
//        getPaymentInfo(evt);

    }//GEN-LAST:event_cash_RadioButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Button2;
    private javax.swing.JButton ExitButton3;
    private javax.swing.ButtonGroup Payment_buttonGroup;
    private javax.swing.JRadioButton card_RadioButton2;
    private javax.swing.JLabel cardnum_Label6;
    private javax.swing.JTextField cardnum_TextField3;
    private javax.swing.JList<String> cart_List1;
    private javax.swing.JRadioButton cash_RadioButton1;
    private javax.swing.JLabel customer_name;
    private javax.swing.JLabel cvv_Label8;
    private javax.swing.JTextField cvv_TextField4;
    private javax.swing.ButtonGroup deliverer_buttonGroup;
    private javax.swing.JLabel holdername_Label5;
    private javax.swing.JTextField holdername_TextField1;
    private javax.swing.JList<String> itemlist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton pick_upRadioButton4;
    private javax.swing.JButton print_bill_Button3;
    private javax.swing.JButton remove_Button1;
    private javax.swing.JRadioButton shipping_RadioButton3;
    private javax.swing.JLabel type_Label7;
    private javax.swing.JTextField type_TextField2;
    // End of variables declaration//GEN-END:variables
    public List<Items> getAllItems(){
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        PreparedStatement getCD=null;
        PreparedStatement getBook=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
             getBook = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM book");
            resultSet=getBook.executeQuery();
            getingItems =new ArrayList<Items>();
            while (resultSet.next()){
                getingItems.add(new Books(resultSet.getInt("book_id"),
                        resultSet.getString("book_name"),
                        resultSet.getDouble("book_price"),
                        resultSet.getString("publisher")));
            }
             getCD = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM cd");
            resultSet=getCD.executeQuery();
            while (resultSet.next()){
                getingItems.add(new CD(resultSet.getInt("cd_id"),
                        resultSet.getString("cd_name"),
                        resultSet.getDouble("cd_price")));
            }

        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                resultSet.close();
                getBook.close();
                getCD.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return getingItems;
    }

    public List<cartclass> getAllCart(){
//        List<Integer> items_id=null;
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        PreparedStatement getItems=null;
        PreparedStatement getBook=null;
        PreparedStatement getCD=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
             getItems = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM sunshine.cart WHERE order_id=?");
            getItems.setInt(1,id_order);
            resultSet=getItems.executeQuery();
            cart=new ArrayList<cartclass>();
            while (resultSet.next()){
                cart.add(new cartclass(resultSet.getInt("order_id"),resultSet.getInt("item_id"),resultSet.getInt("num_item"),resultSet.getDouble("price")));
            }
           for (cartclass c:cart){
                 getBook = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM book where book_id=?");
                getBook.setInt(1,c.getItem_id());
                resultSet = getBook.executeQuery();
                while (resultSet.next()) {
                    c.setItems(new Books(resultSet.getInt("book_id"),
                            resultSet.getString("book_name"),
                            resultSet.getDouble("book_price"),
                            resultSet.getString("publisher")));
                }
                 getCD = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM cd where cd_id=?");
               getCD.setInt(1,c.getItem_id());
                resultSet = getCD.executeQuery();
                while (resultSet.next()) {
                    c.setItems(new CD(resultSet.getInt("cd_id"),
                            resultSet.getString("cd_name"),
                            resultSet.getDouble("cd_price")));
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                resultSet.close();
//                getBook.close();
//                getCD.close();
                getItems.close();
                dbconn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
//        return getingItems;
        return cart;
    }


    void showCustomer_info(String username,String password){
        DB conn=new DB();
        Connection dbconn=conn.connectDB();
        PreparedStatement st=null;
        ResultSet res=null;
        PreparedStatement st1=null;
        ResultSet cos_ifo =null;
        try {
             st = (PreparedStatement)
                    dbconn.prepareStatement("select * from account where username = ? and password =? ");
            st.setString(1, username);
            st.setString(2, password);
             res = st.executeQuery();
            if (res.next()){
                id_customer=res.getInt("person_id");
                 st1 = (PreparedStatement)
                        dbconn.prepareStatement("select * from customer where coustomer_id = ? ");
                st1.setInt(1,id_customer);
                 cos_ifo =st1.executeQuery();
                if (cos_ifo.next()){
                    customer_name.setText(cos_ifo.getString("coustomer_name"));
                }

            }
        }catch (Exception e){
e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                st.close();
                st1.close();
                res.close();
                cos_ifo.close();
            }catch (Exception e){
                e.printStackTrace();
            }
        }

    }

    void addToCArat(int select ,int id_item,int id) {

        DB n= new DB();
        Connection dbconn =n.connectDB();

        try {
            PreparedStatement exit = (PreparedStatement) dbconn.prepareStatement("select * from cart where order_id=? and item_id=?");
            exit.setInt(1, id);
            exit.setInt(2, id_item);
            ResultSet res = exit.executeQuery();
            if (res.next()){
                int numOfItem=res.getInt("num_item")+1;
                double priceOfitem =getAllItems().get(select).getItem_prise()* numOfItem;
                PreparedStatement update = (PreparedStatement) dbconn.prepareStatement("update cart set num_item =? , price =? where order_id=? and item_id=?");
                update.setInt(1,numOfItem);
                update.setDouble(2,priceOfitem);
                update.setInt(3, id);
                update.setInt(4, id_item);
                int update9 = update.executeUpdate();
                if (update9==1){
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item stat up date to cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
return;
            }

            if (res.next()==false){
              PreparedStatement  st = (PreparedStatement) dbconn.prepareStatement("insert into cart(order_id,item_id ,num_item,price) values (?,?,?,?)  ");
                st.setInt(1, id);
                st.setInt(2, id_item);
                st.setInt(3, 1);
                st.setDouble(4, getAllItems().get(select).getItem_prise());
                int res2 = st.executeUpdate();
                if (res2 == 1) {
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item Added to cart!", "done!", JOptionPane.INFORMATION_MESSAGE);

//                   JOptionPane.showMessageDialog(this, "item Added to cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
            }


        }catch (SQLException e) {

            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
            }catch (SQLException e) {

                e.printStackTrace();
            }

        }
    }

    void showCart(){
        int i=0;
        listitem=new String[50];
        if (cart!=null){
            for (cartclass b: cart){
                if (i!=50){
                    listitem[i]=b.toString();
                    i++;
                }
            }
            cart_List1.setModel(new DefaultComboBoxModel<>(listitem));
        }
    }

    void deleteItem(int select)  {
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
            if (cart.get(select).getNumItem()>1) {

                try {
                    PreparedStatement exit = (PreparedStatement) dbconn.prepareStatement("select * from cart where order_id=? and item_id=?");

                    exit.setInt(1, id_order);
                    exit.setInt(2, cart.get(select).getItem_id());
                   ResultSet  res = exit.executeQuery();
                    if (res.next()) {
                        int numOfItem = res.getInt("num_item") - 1;
                        double priceOfitem =cart.get(select).getItems().getItem_prise()* numOfItem;
                        PreparedStatement update = (PreparedStatement) dbconn.prepareStatement("update cart set num_item =? , price =? where order_id=? and item_id=?");
                        update.setInt(1, numOfItem);
                        update.setDouble(2, priceOfitem);
                        update.setInt(3, id_order);
                        update.setInt(4, cart.get(select).getItem_id());
                        int update9 = update.executeUpdate();
                        if (update9 == 1) {
                            getAllCart();
                            showCart();
                            }

                            JOptionPane.showMessageDialog(this, "one item delete from cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }

                } catch(SQLException e){
                    e.printStackTrace();
                }
            }
            if (cart.get(select).getNumItem()==1){
                PreparedStatement delete = (PreparedStatement) dbconn.prepareStatement("DELETE FROM cart WHERE (order_id=? and item_id = ?)");
                delete.setInt(1, cart.get(select).getOrder_id());
                delete.setInt(2, cart.get(select).getItem_id());
                int reslt=delete.executeUpdate();
                if (reslt==1){
                    getAllCart();
                    showCart();
                    JOptionPane.showMessageDialog(this, "item delete from cart!", "done!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
            dbconn.close();
            }catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    void showCArdfield(java.awt.event.ActionEvent evt){
        if (evt.getSource().equals(card_RadioButton2)){
            holdername_Label5.setVisible(true);
            cardnum_Label6.setVisible(true);
            cvv_Label8.setVisible(true);
            type_Label7.setVisible(true);
            holdername_TextField1.setVisible(true);
            type_TextField2.setVisible(true);
            cvv_TextField4.setVisible(true);
            cardnum_TextField3.setVisible(true);
        }


            if (evt.getSource().equals(cash_RadioButton1)){
                holdername_Label5.setVisible(false);
                cardnum_Label6.setVisible(false);
                cvv_Label8.setVisible(false);
                type_Label7.setVisible(false);
                holdername_TextField1.setVisible(false);
                type_TextField2.setVisible(false);
                cvv_TextField4.setVisible(false);
                cardnum_TextField3.setVisible(false);
            }

    }
    void setTotalPrice_(){
        DB n= new DB();
        Connection dbconn =n.connectDB();
      try  {

         PreparedStatement totalPrice= (PreparedStatement) dbconn.prepareStatement("SELECT sum(price) , sum(num_item) from cart  where order_id=?");
            totalPrice.setInt(1, id_order);
            ResultSet res_price = totalPrice.executeQuery();
            if (res_price.next()) {
                num_items = res_price.getInt("sum(num_item)");
                totalPrice_ = res_price.getDouble("sum(price)");
            }
        }catch (SQLException e){
          e.printStackTrace();
      }
    }
    void sendPaynemt(Payment obj,int num_items){
        DB n= new DB();
        Connection dbconn =n.connectDB();

       try {
            if (obj instanceof card) {
                PreparedStatement card=dbconn.prepareStatement("insert into card(holder_name,type,ccv,card_number ,Payment_id,Order_Total_price,num_items) values (?,?,?,?,?,?,?)");
                card.setString(1,((card) obj).getOwner_name());
                card.setString(2,((card) obj).getType());
                card.setString(3,((card) obj).getCCV());
                card.setString(4,((card) obj).getCard_num());
                card.setInt(5,obj.getPay_id());
                card.setDouble(6,obj.getTotal_price());
                card.setInt(7,num_items);
                int Reslt=card.executeUpdate();
                if (Reslt==1){
                    card.close();
                }
            }

            if (obj instanceof cash) {
                PreparedStatement cash=dbconn.prepareStatement("insert into cash(Payment_id,Order_Total_price,currency,num_items) values (?,?,?,?)");
                cash.setInt(1,obj.getPay_id());
                cash.setDouble(2,obj.getTotal_price());
                cash.setString(3,((cash) obj).getCurrency());
                cash.setInt(4,num_items);
                int reslt=cash.executeUpdate();
                if(reslt==1){
                    cash.close();
                }
            }
        }catch (SQLException e){
           e.printStackTrace();
       }finally {
           try {
             dbconn.close();
           }catch (SQLException e){
               e.printStackTrace();
           }
       }
    }

    void sendDeliveryInfo(Order obj){
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try{
            if (obj instanceof pick_up) {
                PreparedStatement pick=dbconn.prepareStatement("insert into receiptofrequest(Time_of_Request,Order_id) values (?,?)");
                pick.setInt(2,obj.getId());
                pick.setDate(1, ((pick_up) obj).getPickup_time());
                int insetToPick=pick.executeUpdate();
                if (insetToPick==1){
                    pick.close();
                }
            }

            if (obj instanceof Shipping) {
                PreparedStatement ship=dbconn.prepareStatement("insert into order_shipping(Company_Name,price_Of_shipping,Time_of_shipping,order_id) values (?,?,?,?)");
                ship.setString(1,((Shipping) obj).getCompany());
                ship.setDouble(2,((Shipping) obj).getShipping_price());
                ship.setDate(3, ((Shipping) obj).getShipping_time());
                ship.setInt(4,obj.getId());
                int insetToPick=ship.executeUpdate();
                if (insetToPick==1){
                    ship.close();
                }

            }
        }catch (SQLException e){
            e.printStackTrace();
        }
    }

   boolean sendOrderRecord(int id_order ,int custemer_id,int id_payment,java.sql.Date order_date){
       DB n= new DB();
       Connection dbconn =n.connectDB();
       PreparedStatement inserToOrderRecord=null;
       try {
            inserToOrderRecord=dbconn.prepareStatement("insert into order_record(order_id,custemer_id,pay_id,order_date) values (?,?,?,?)");
           inserToOrderRecord.setInt(1,id_order);
           inserToOrderRecord.setInt(2,custemer_id);
           inserToOrderRecord.setInt(3,id_payment);
           inserToOrderRecord.setDate(4,order_date);
           int inser=inserToOrderRecord.executeUpdate();
           if (inser==1){
               return true;
           }

       }catch (SQLException e){
           e.printStackTrace();
       }finally {
           try {
               dbconn.close();
               inserToOrderRecord.close();
           } catch (SQLException e) {
               e.printStackTrace();
           }
       }
return false;
   }
    }

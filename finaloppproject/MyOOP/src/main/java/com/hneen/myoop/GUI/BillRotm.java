/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hneen.myoop.GUI;

import com.hneen.myoop.*;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author hneen
 */
public class BillRotm extends javax.swing.JFrame {

    /**
     * Creates new form BillRotm
     */
    Customer cous;
    List<cartclass> cart;
    public BillRotm(int customer_id, int num_items, Payment pay, Order delivery) {

        initComponents();
        showCustomer_info(customer_id);
        getAllCart(delivery.getId());
        bill_sarry_TextArea2.setEnabled(false);
        bill_sarry_TextArea2.setText(printBill(cous,num_items,cart,pay,delivery));
        bill_sarry_TextArea2.append("******* cart info *********");
        showCart();
    }

    public BillRotm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        done_Button1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bill_sarry_TextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 244, 248));

        jPanel2.setBackground(new java.awt.Color(44, 42, 65));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\hneen\\Documents\\NetBeansProjects\\project_oop2\\src\\main\\icons\\bill.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Bill");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        done_Button1.setBackground(new java.awt.Color(253, 191, 80));
        done_Button1.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        done_Button1.setForeground(new java.awt.Color(0, 0, 0));
        done_Button1.setText("Done!");
        done_Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                done_Button1ActionPerformed(evt);
            }
        });

        bill_sarry_TextArea2.setColumns(20);
        bill_sarry_TextArea2.setRows(5);
        jScrollPane2.setViewportView(bill_sarry_TextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(done_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(done_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void done_Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_done_Button1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_done_Button1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillRotm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillRotm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillRotm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillRotm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillRotm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bill_sarry_TextArea2;
    private javax.swing.JButton done_Button1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    void showCustomer_info(int id_customer) {
        DB conn = new DB();
        Connection dbconn = conn.connectDB();
        try {
            PreparedStatement st1 = (PreparedStatement)
                    dbconn.prepareStatement("select * from customer where coustomer_id = ? ");
            st1.setInt(1, id_customer);
            ResultSet emp_ifo = st1.executeQuery();
            if (emp_ifo.next()) {
                cous=new Customer(id_customer,emp_ifo.getString("coustomer_name"),emp_ifo.getString("coustomer_Email"),emp_ifo.getString("coustomer_address"));
            }
            dbconn.close();
            st1.close();
            emp_ifo.close();
        }catch(Exception e) {
            e.printStackTrace();
        }
    }



    String printBill(Customer customer, int num_items,List<cartclass> cart, Payment pay, Order delivery){
        String bill=null;
       if (pay instanceof cash){
         if (delivery instanceof Shipping) {
               bill = "********************************\n" +
                       "*         Order Summery        *\n" +
                       "********************************\n" +
                       "  Order ID:    " + delivery.getId() + "\n" +
                       "  Customer Information:\n" +
                       "  ID: " + customer.getId() + "\n" +
                       "  Name: " + customer.getName() + "\n" +
                       "  Email: " + customer.getEmail() + "\n" +
                       "  Address: " + customer.getAddress() + "\n" +
                       "  Number Of Items: " + num_items + "  Total Price: " + pay.getTotal_price() + "\n" +
                       "  Delivery Way: shipping\n" +
                       "  Company Name: " + ((Shipping) delivery).getCompany()+"\n"+
                       "  Shipping Price: "+((Shipping) delivery).getShipping_price()+"\n" +
                       "  Shipping Date: "+((Shipping) delivery).getShipping_time() +"\n"+
                       "  Payment Way : Cash\n" +
                       "  Total : "+(pay.getTotal_price()+((Shipping) delivery).getShipping_price())+"\n\n";
           }
           if (delivery instanceof pick_up) {
               bill = "********************************\n" +
                       "*         Order Summery        *\n" +
                       "********************************\n" +
                       "  Order ID:    " + delivery.getId() + "\n" +
                       "  Customer Information:\n" +
                       "  ID: " + customer.getId() + "\n" +
                       "  Name: " + customer.getName() + "\n" +
                       "  Email: " + customer.getEmail() + "\n" +
                       "  Address: " + customer.getAddress() + "\n" +
                       "  Number Of Items: " + num_items + "  Total Price: " + pay.getTotal_price() + "\n" +
                       "  Delivery Way: Pick Up form store\n" +
                       "  Shipping Date: "+((pick_up) delivery).getPickup_time()+"\n" +
                       "  Payment Way : Cash \n" +
                       "  Total : "+pay.getTotal_price()+"\n\n";
           }
        }
        if (pay instanceof card){
            if (delivery instanceof Shipping) {
                bill = "********************************\n" +
                        "*         Order Summery        *\n" +
                        "********************************\n" +
                        "  Order ID:    " + delivery.getId() + "\n" +
                        "  Customer Information:\n" +
                        "  ID: " + customer.getId() + "\n" +
                        "  Name: " + customer.getName() + "\n" +
                        "  Email: " + customer.getEmail() + "\n" +
                        "  Address: " + customer.getAddress() + "\n" +
                        "  Number Of Items: " + num_items + "  Total Price: " + pay.getTotal_price() + "\n" +
                        "  Delivery Way: shipping\n" +
                        "  Company Name: " + ((Shipping) delivery).getCompany()+"\n"+
                        "  Shipping Price: "+((Shipping) delivery).getShipping_price()+"\n" +
                        "  Shipping Date: "+((Shipping) delivery).getShipping_time() +"\n"+
                        "  Payment Way : Card \n" +
                        "  Total : "+(pay.getTotal_price()+((Shipping) delivery).getShipping_price())+"\n\n";
            }
            if (delivery instanceof pick_up) {
                bill = "********************************\n" +
                        "*         Order Summery        *\n" +
                        "********************************\n" +
                        "  Order ID:    " + delivery.getId() + "\n" +
                        "  Customer Information:\n" +
                        "  ID: " + customer.getId() + "\n" +
                        "  Name: " + customer.getName() + "\n" +
                        "  Email: " + customer.getEmail() + "\n" +
                        "  Address: " + customer.getAddress() + "\n" +
                        "  Number Of Items: " + num_items + "  Total Price: " + pay.getTotal_price() + "\n" +
                        "  Delivery Way: Pick Up form store\n" +
                        "  Shipping Date: "+((pick_up) delivery).getPickup_time()+"\n" +
                        "  Payment Way : Card \n" +
                        "  Total : "+pay.getTotal_price()+"\n\n";
            }
        }
return bill;
    }



    public List<Items> getAllCart(int id_order){
        List<Integer> items_id=null;
        List<Items> getingItems =null;
        ResultSet resultSet=null;
        DB n= new DB();
        Connection dbconn =n.connectDB();
        try {
            PreparedStatement getItems = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM sunshine.cart WHERE order_id=?");
            getItems.setInt(1,id_order);
            resultSet=getItems.executeQuery();
            cart=new ArrayList<cartclass>();
            while (resultSet.next()){
                cart.add(new cartclass(resultSet.getInt("order_id"),resultSet.getInt("item_id"),resultSet.getInt("num_item"),resultSet.getDouble("price")));
            }

            for (cartclass c:cart){
                PreparedStatement getBook = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM book where book_id=?");
                getBook.setInt(1,c.getItem_id());
                resultSet = getBook.executeQuery();
                while (resultSet.next()) {
                    c.setItems(new Books(resultSet.getInt("book_id"),
                            resultSet.getString("book_name"),
                            resultSet.getDouble("book_price"),
                            resultSet.getString("publisher")));
                }
                PreparedStatement getCD = (PreparedStatement) dbconn.prepareStatement("SELECT * FROM cd where cd_id=?");
                getCD.setInt(1,c.getItem_id());
                resultSet = getCD.executeQuery();
                while (resultSet.next()) {
                    c.setItems(new CD(resultSet.getInt("cd_id"),
                            resultSet.getString("cd_name"),
                            resultSet.getDouble("cd_price")));
                }
                getBook.close();
                getCD.close();
                resultSet.close();
            }
            getItems.close();
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                resultSet.close();
                dbconn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return getingItems;
    }

    void showCart(){

        if (cart!=null){
            for (cartclass b: cart){
                bill_sarry_TextArea2.append(b.toString());
                }
            }
        }
    }



